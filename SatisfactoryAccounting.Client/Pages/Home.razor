@page "/"
@using SatisfactoryAccounting.Model

@inject SatisfactoryModelProvider SatisfactoryModelProvider
@inject ILogger<Home> Logger

<PageTitle>Home</PageTitle>

<MudContainer Class="mt-4" MaxWidth="MaxWidth.Large">
    <MudGrid Spacing="4">
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" OnClick="LoadModel">Load Model</MudButton>
                @if (SatisfactoryModel is not null)
                {
                    <MudItem xs="12">
                        <h1>Satisfactory Model</h1>
                        There are @SatisfactoryModel.Recipes.Classes.Count recipes loaded!
                        <MudForm Spacing="4">
                            <MudAutocomplete @bind-Value="SelectedItemDescriptorDisplayName" SearchFunc="SearchItemDescriptorAsync" Placeholder="Enter for item to make..." Clearable="true"></MudAutocomplete>
                            <MudNumericField @bind-Value="SelectedItemDescriptorAmount" Label="Amount" Min="0.0"/>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Solve">Solve</MudButton>
                        </MudForm>
                    </MudItem>
                }
            </MudPaper>
        </MudItem>
        @if (Solution is not null)
        {
            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    Some solution
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
    
</MudContainer>

@code {
    private SatisfactoryModel? SatisfactoryModel { get; set; }
    private string SelectedItemDescriptorDisplayName { get; set; } = string.Empty;
    private double SelectedItemDescriptorAmount { get; set; } = 1.0;
    
    private BasicSolution? Solution { get; set; }
    
    protected override Task OnInitializedAsync()
    {
        Logger.LogInformation("Initialized!");
        return Task.CompletedTask;
    }

    private async Task LoadModel()
    {
        try
        {
            SatisfactoryModel = await SatisfactoryModelProvider.GetModel();
            Logger.LogInformation("Initialized!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load model");
        }
    }
    
    private Task<IEnumerable<string>> SearchItemDescriptorAsync(string value, CancellationToken token) => Task.FromResult(SearchItemDescriptor(value));

    private IEnumerable<string> SearchItemDescriptor(string value)
    {
        if (SatisfactoryModel is null) return [];

        var displayNames = SatisfactoryModel.ItemDescriptors.Classes.Select(c => c.DisplayName);
        
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return displayNames;

        return displayNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void Solve()
    {
        if (SatisfactoryModel is null || SelectedItemDescriptorAmount == 0) return;
        var desiredItem = SatisfactoryModel.ItemDescriptors.Classes.SingleOrDefault(id => id.DisplayName == SelectedItemDescriptorDisplayName);
        if (desiredItem is null) return;

        Solution = new BasicSolution(SatisfactoryModel, [new ItemRate(desiredItem.ClassName, SelectedItemDescriptorAmount)]);
    }
}