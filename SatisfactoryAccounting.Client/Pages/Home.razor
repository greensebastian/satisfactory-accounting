@page "/"
@using SatisfactoryAccounting.Model

@inject SatisfactoryModelProvider SatisfactoryModelProvider
@inject ILogger<Home> Logger

<PageTitle>Home</PageTitle>

<MudContainer Class="mt-4" MaxWidth="MaxWidth.Large">
    <MudGrid Spacing="4">
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" OnClick="LoadModel">Load Model</MudButton>
                @if (SatisfactoryModel is not null)
                {
                    <MudItem xs="12">
                        <h1>Satisfactory Model</h1>
                        There are @SatisfactoryModel.Recipes.Classes.Count recipes loaded!
                        <MudForm Spacing="4">
                            <MudAutocomplete @bind-Value="SelectedItemDescriptorDisplayName" SearchFunc="SearchItemDescriptorAsync" Placeholder="Enter for item to make..." Clearable="true"></MudAutocomplete>
                            <MudNumericField @bind-Value="SelectedItemDescriptorAmount" Label="Amount" Min="0.0"/>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateSolution">Solve</MudButton>
                        </MudForm>
                    </MudItem>
                }
            </MudPaper>
        </MudItem>
        @if (Solution is not null && SatisfactoryModel is not null)
        {
            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    <MudTable Items="SolutionTableRowElements" GroupBy="SolutionTableGroupDefinition" Hover="true">
                        <ColGroup>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>Recipe</MudTh>
                            <MudTh>Multiplier</MudTh>
                            <MudTh>Machine</MudTh>
                            <MudTh>Item</MudTh>
                            <MudTh>Amount</MudTh>
                        </HeaderContent>
                        <GroupHeaderTemplate>
                            <MudTh>@context.Key</MudTh>
                            <MudTh>@Math.Round(context.Items.First().SolutionComponent.Multiplier, 2)</MudTh>
                            <MudTh>@context.Items.First().SolutionComponent.Recipe.ProducedInReadable</MudTh>
                            <MudTh/>
                            <MudTh/>
                        </GroupHeaderTemplate>
                        <RowTemplate>
                            <MudTd/>
                            <MudTd/>
                            <MudTd/>
                            <MudTd>@SatisfactoryModel?.ItemDescriptorByClassName(context.ItemRate.ItemClassName)?.DisplayName</MudTd>
                            <MudTd>@Math.Round(context.ItemRate.Amount, 2)</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
            @foreach (var component in Solution.Components)
            {
                <MudItem xs="12">
                    <MudPaper Class="pa-4">
                        <MudText Typo="Typo.h5">@component.Recipe.DisplayName</MudText>
                        <MudText Typo="Typo.h6">@Math.Round(component.Multiplier * 100)% | @component.Recipe.ProducedInReadable</MudText>
                        <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Top">
                            <MudTimelineItem Color="Color.Info" Variant="Variant.Filled">
                                <ItemContent>
                                    <MudAlert Severity="Severity.Info">
                                        <MudTable Items="component.Input" Hover="true" Breakpoint="Breakpoint.None" Dense="true">
                                            <HeaderContent>
                                                <MudTh>Input</MudTh>
                                                <MudTh>IPM</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Input">@(SatisfactoryModel.ItemDescriptorByClassName(context.ItemClassName)?.DisplayName ?? context.ItemClassName)</MudTd>
                                                <MudTd DataLabel="IPM">@Math.Round(context.Amount, 2)</MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </MudAlert>
                                </ItemContent>
                                <ItemOpposite>
                                    <MudText Color="Color.Info">1</MudText>
                                </ItemOpposite>
                            </MudTimelineItem>
                            <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
                                <ItemContent>
                                    <MudAlert Severity="Severity.Success">
                                        <MudTable Items="component.Output" Hover="true" Breakpoint="Breakpoint.None" Dense="true">
                                            <HeaderContent>
                                                <MudTh>Output</MudTh>
                                                <MudTh>IPM</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Output">@(SatisfactoryModel.ItemDescriptorByClassName(context.ItemClassName)?.DisplayName ?? context.ItemClassName)</MudTd>
                                                <MudTd DataLabel="IPM">@Math.Round(context.Amount, 2)</MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </MudAlert>
                                </ItemContent>
                                <ItemOpposite>
                                    <MudText Color="Color.Success">2</MudText>
                                </ItemOpposite>
                            </MudTimelineItem>
                        </MudTimeline>
                    </MudPaper>
                </MudItem>
            }
        }
    </MudGrid>
    
</MudContainer>

@code {
    private SatisfactoryModel? SatisfactoryModel { get; set; }
    private string SelectedItemDescriptorDisplayName { get; set; } = string.Empty;
    private double SelectedItemDescriptorAmount { get; set; } = 1.0;
    
    private BasicSolution? Solution { get; set; }

    private IEnumerable<SolutionTableRowElement> SolutionTableRowElements => Solution?.Components.SelectMany(component => component.Output.Select(itemRate => new SolutionTableRowElement(component, itemRate))) ?? [];
    
    private TableGroupDefinition<SolutionTableRowElement> SolutionTableGroupDefinition { get; } = new()
    {
        GroupName = "Recipe",
        Expandable = true,
        Indentation = true,
        Selector = el => el.SolutionComponent.Recipe.DisplayName
    };
    
    private class SolutionTableRowElement(BasicSolution.SolutionComponent solutionComponent, ItemRate itemRate)
    {
        public BasicSolution.SolutionComponent SolutionComponent { get; } = solutionComponent;
        public ItemRate ItemRate { get; } = itemRate;
    }
    
    protected override Task OnInitializedAsync()
    {
        Logger.LogInformation("Initialized!");
        return Task.CompletedTask;
    }

    private async Task LoadModel()
    {
        try
        {
            SatisfactoryModel = await SatisfactoryModelProvider.GetModel();
            Logger.LogInformation("Initialized!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load model");
        }
    }
    
    private Task<IEnumerable<string>> SearchItemDescriptorAsync(string value, CancellationToken token) => Task.FromResult(SearchItemDescriptor(value));

    private IEnumerable<string> SearchItemDescriptor(string value)
    {
        if (SatisfactoryModel is null) return [];

        var displayNames = SatisfactoryModel.ItemDescriptors.Classes.Select(c => c.DisplayName);
        
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return displayNames;

        return displayNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void CreateSolution()
    {
        if (SatisfactoryModel is null || SelectedItemDescriptorAmount == 0) return;
        var desiredItem = SatisfactoryModel.ItemDescriptors.Classes.SingleOrDefault(id => id.DisplayName == SelectedItemDescriptorDisplayName);
        if (desiredItem is null) return;

        Solution = new BasicSolution(SatisfactoryModel, [new ItemRate(desiredItem.ClassName, SelectedItemDescriptorAmount)]);
    }
}